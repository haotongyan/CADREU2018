Contained in this repository is one of the programs I wrote during my 2018 REU in combinatorics and complexity at Boise State University. It verifies one of our conjectures for our theoretical framework.

Theis verification code was a particularly interesting challenge. The complexity of our verification was huge; we wanted to check a particular condition for each positive integer n, and the complexity of doing so was O(2^(n^2)). Thus most of the work in writing this code was to reduce the redundant/unnecessary cases we needed to check as much as possible, as well as take advantage of innately fast computer operations. For the former, I found ways to cleverly order our data so that the important cases came first - and as soon as those cases were checked, it became very likely that a huge block of later cases could be discarded. For the latter, I implemented multiple strategies. The first was to take advantage of parallelization and to run the code on the university's 28-core supercomputers. Another method was to use C and bit-shift operations so that runtime could be reduced by another few orders of magnitude. Combining all of these strategies, my code was able to give us verifications for high values of n, which were critical in informing our theoretical research direction.
